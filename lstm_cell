import numpy as np

def lstm_cell_forward(xt,a_prev,c_prev,parameters):
    
    
    Wf=parameters["Wf"]
    bf=parameters["bf"]
    Wi=parameters["Wi"]
    bi=parameters["bi"]
    Wc=parameters["Wc"]
    bc=parameters["bc"]
    Wo=parameters["Wo"]
    bo=parameters["bo"]
    Wy=parameters["Wy"]
    by=parameters["by"]
    
    
    n_x,m=xt.shape
    n_y,n_a=Wy.shape
    
    concat=np.concatenate([a_prev,x])
    
    
    ft=sigmoid(np.dot(Wf,concat)+bf)#forget gate
    it=sigmoid(np.dot(Wi,concat)+bi)#update gate
    cct=tanh(np.dot(Wc,concat)+bc) #candidate c
    c_next=c_prev*ft+cct*it#c
    ot=sigmoid(np.dot(Wo,concat)+bo)#output gate
    
    a_next=ot*(np.tanh(c_next))
    yt_pred=softmax(np.dot(Wy,a_next)+by)
    
    cache = (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters)
    
    return a_next,c_next,yt_pred,cache

def lstm_forward(x,a0,parameters):
    
    
    caches=[]
    
    n_x,m,T_x=x.shape
    n_y,n_a=parameters["Wy"].shape
    
    a=np.zeros((n_a,m,T_x))
    c=np.zeros((n_a,m,T_x))
    y=np.zeros((n_y,m,T_x))
    
    a_next=a0
    c_next=np.zeros((n_a,m))
    
    
    for t in range(T_x):
        
        xt=x[:,:,t]
        
        a_next,c_next,yt,cache=lstm_cell_forward(xt, a_next, c_next, parameters)
        
        a[:,:,t]=a_next
        
        c[:,:,t]=c_next
        
        y[:,:,t]=yt
        
        caches.append(cache)
        
    caches=(cache,x)
    
    
    return a, y,c ,caches
